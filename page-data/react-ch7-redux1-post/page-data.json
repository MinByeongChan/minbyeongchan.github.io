{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-ch7-redux1-post/","result":{"data":{"site":{"siteMetadata":{"title":"ByeongChan"}},"markdownRemark":{"id":"9ca0038a-eea4-59dd-8ea0-0a56ff77ebb2","excerpt":"…","html":"<h1>리액트에서의 리덕스 필요성</h1>\n<p>리액트는 컴포넌트별로 구성되어있는 자바스크립트 기반 프레임워크입니다. 컴포넌트로 구성시켜 구조를 짜야하기 때문에 데이터를 주고 받아야하는 상황이 많아집니다. 데이터 주고 받는 방법은 이전에 <code class=\"language-text\">props</code>를 통해 알아봤지만, 프로젝트를 구성하다 보면 컴포넌트가 당연히 많아져 하드코딩을 할수 밖에 없어졌습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ComponentA</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>ComponentA<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>data <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ComponentB</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ComponentB data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ComponentB<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ComponentC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ComponentB data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ComponentB<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ComponentD</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token string\">\"hello props\"</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ComponentC data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ComponentC<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>ComponentD <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"Test\" src=\"https://codepen.io/minbyeongchan/embed/RwGpQjM?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/minbyeongchan/pen/RwGpQjM'>Test</a> by ILikeTteokBoKki\n  (<a href='https://codepen.io/minbyeongchan'>@minbyeongchan</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>위처럼 wrapper가 많은 상황임을 고려해보면, App컴포넌트는 결국 componentD에서의 data를 출력하기 위해 ComponentD, C, B를 거쳐서야 비로소 출력을 할 수 있습니다. 예제가 적절하진 않지만, 이럴 경우 언제나 props을 주고 받는 짓은 하고 싶지 않을 것 입니다.</p>\n<p>그래서 리액트에서는 <code class=\"language-text\">컨텍스트</code>라는 개념이 존재합니다. <code class=\"language-text\">Provider</code>와 <code class=\"language-text\">Consumer</code>가 존자해서 Provider는 데이터를 오직 전달만 가능하고 Consumer는 Provider가 제공하는 데이터를 받아서 사용할 수 있습니다. 하지만 이것 역시 불편한 점이 존재하여 Redux를 사용하려고 합니다.(자세한 설명은 생략!)</p>\n<h1>Redux 개념</h1>\n<p>그렇다면 리덕스가 무엇인가. 리덕스는 간단히 말하여 <code class=\"language-text\">데이터를 공유하는 저장소</code>입니다. 위에서 ComponentA, B, C, D, App은 여러 컴포넌트를 거칠 필요없이 리덕스에서 뿌려주는 데이터를 받아서 사용하기만 하면 되는 개념입니다.</p>\n<div style=\"text-align: center;\">\n<img src=\"https://blog.codecentric.de/files/2017/12/Bildschirmfoto-2017-12-01-um-08.53.32.png\" alt=\"drawing\" width=\"70%\">\n</div>\n<p>위 그림처럼 redux에서 제공하는 <code class=\"language-text\">store</code>는 각 컴포넌트에게 데이터를 전달합니다. 그것도 직접적으로 곧바로 전달합니다. 스토어에서 직접적으로 데이터를 받고 수정하고 적용까지 가능하다니 리액트에서 반드시 필요한 개념입니다.</p>\n<h2>리덕스 동작</h2>\n<p>리덕스는 구조는 다음과 같습니다.</p>\n<img src=\"https://miro.medium.com/max/1838/0*95tBOgxEPQAVq9YO.png\" alt=\"drawing\" width=\"100%\">\n<ul>\n<li>Action(액션) : 동작을 취하는 값이다. 어떤 작업(리듀서)이 동작하도록 특정 값(action)을 통해서 전달된다.</li>\n<li>Reducer(리듀서) : 실제로 데이터가 처리되는 부분이다. 데이터를 생성, 수정, 삭제, 조회 등 작업을 하는 동작을 말한다.</li>\n<li>Store(스토어) : 데이터가 저장되는 공간이다. 스토어를 통해서 컴포넌트는 데이터를 전달받는다.</li>\n<li>Dispatch (디스패치) : 스토어에 있는 데이터를 수정할 수 있다고 했다. View에서는 dispatch라는 함수를 통해 액션을 호출한다. 액션을 호출함으로서 리듀서를 동작시킨다.</li>\n</ul>\n<h2>동작 흐름</h2>\n<br>\n<ol>\n<li>View(Component)에서 원하는 데이터를 dispatch 하여 액션을 불러온다.</li>\n<li>특정액션이 호출되면 액션에 해당하는 리듀서 내부에 switch-case 문에 의해 동작을 감지한다.</li>\n<li>리듀서가 동작한다.</li>\n<li>리듀서는 스토어에 데이터를 전달한다.</li>\n<li>스토어에 데이터가 저장된다.</li>\n<li>connect함수 또는 store.getState로 데이터를 불러온다.</li>\n</ol>\n<iframe height=\"301\" style=\"width: 100%;\" scrolling=\"no\" title=\"RwGpQjM\" src=\"https://codepen.io/minbyeongchan/embed/RwGpQjM?height=301&theme-id=dark&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/minbyeongchan/pen/RwGpQjM'>RwGpQjM</a> by ILikeTteokBoKki\n  (<a href='https://codepen.io/minbyeongchan'>@minbyeongchan</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>","frontmatter":{"title":"[React] Redux, 공용 데이터 저장소 개념","date":"December 08, 2020","description":null}}},"pageContext":{"slug":"/react-ch7-redux1-post/","previous":{"fields":{"slug":"/react-ch5-functioncomponent-post/"},"frontmatter":{"title":"[React] map함수를 활용한 리스트 컴포넌트 만들기"}},"next":{"fields":{"slug":"/react-ch8-redux2-post/"},"frontmatter":{"title":"[React] Redux, 스토어에 데이터 저장하는 방법"}}}},"staticQueryHashes":["1246554614","2841359383"]}