{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript-ch1-variables-post/","result":{"data":{"site":{"siteMetadata":{"title":"ByeongChan"}},"markdownRemark":{"id":"64624e24-deb8-57b6-a24c-31da3da6afd7","excerpt":"var Javascript(이하 “JS”)에서 는 일반적으로 모든 변수 타입을 받는다. 일반적인 프로그래밍 언어(C/C++, Java 등등)에서는 변수마다 각 자료형을 선언해주었다. Int, char, string과같이 말이다. 하지만 JS…","html":"<h2>var</h2>\n<p>Javascript(이하 “JS”)에서 <code class=\"language-text\">var</code>는 일반적으로 모든 변수 타입을 받는다. 일반적인 프로그래밍 언어(C/C++, Java 등등)에서는 변수마다 각 자료형을 선언해주었다. Int, char, string과같이 말이다. 하지만 JS에서는 그럴 필요가 없다. <code class=\"language-text\">number</code>는 정수, 실수 모든 것을 포함한다.</p>\n<p>암튼 var의 기능은 이렇게 모든 자료형 타입을 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"MBC\"</span> <span class=\"token comment\">// string</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// int</span>\n  <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1.11</span> <span class=\"token comment\">// float</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>모두 컴파일 에러없이 정상적으로 동작한다.</p>\n<h2>const</h2>\n<p>C++에서도 언급했던 <code class=\"language-text\">const</code>이다. JS에서도 똑같이 적용된다. 한번 초기화한 변수는 변경 불가능한 것을 의미한다. 단, 선언 방식이 좀 다른데 아래 예제롤 보고 참고하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"MBC\"</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"HELLO\"</span>\n\n  a <span class=\"token operator\">=</span> b <span class=\"token comment\">// ERROR</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>let</h2>\n<p><code class=\"language-text\">let</code>은 먼가 생소하다. var는 모든 자료형을 받는다고 한다. 이것은 프로그래밍 할때 큰 단점으로 다가올 수 있다. 이런 단점을 보완하기 위해 있는 것이 <code class=\"language-text\">let</code>이다.</p>\n<p><code class=\"language-text\">let</code>은 <strong>scope(괄호 안)에서 재 초기화 시킨 것은 scope외 밖에서는 영향 받지 않는다.</strong> 무슨의미인지는 아래 예제를 보면 와닿을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">===</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> a <span class=\"token operator\">+=</span> <span class=\"token number\">10</span> <span class=\"token comment\">// scope안에서 재 초기화</span>\n  <span class=\"token punctuation\">}</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 변하지 않고 10 출력</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위 예제는 a(10)에 10을 더해 20을 출력하려고 했다. 하지만 출력 결과는 10이 나온다. 이것이 let의 특성이다.</p>\n<p>scope안에서 초기화 시켜버리면 <strong>scope안에서</strong>는 20이 출력될것이다.</p>\n<p>하지만 <strong>밖</strong>에서는 다시 10이 출력된다.</p>","frontmatter":{"title":"[Javascript] 변수선언 방식의 차이(const, var, let)","date":"January 02, 2020","description":null}}},"pageContext":{"slug":"/javascript-ch1-variables-post/","previous":{"fields":{"slug":"/algorithm-BOJ-11403-post/"},"frontmatter":{"title":"[백준] 11403 경로 찾기"}},"next":{"fields":{"slug":"/javascript-ch2-object-post/"},"frontmatter":{"title":"[Javascript] 변수선언 방식의 차이(const, var, let)"}}}},"staticQueryHashes":["1246554614","2841359383"]}