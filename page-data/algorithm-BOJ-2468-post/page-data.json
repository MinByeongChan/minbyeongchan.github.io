{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm-BOJ-2468-post/","result":{"data":{"site":{"siteMetadata":{"title":"ByeongChan"}},"markdownRemark":{"id":"f770fa2f-6d93-5e09-9bda-7880eefc906e","excerpt":"Problem BOJ 246…","html":"<h1>Problem</h1>\n<p><a href=\"https://www.acmicpc.net/problem/2468\">BOJ 2468</a></p>\n<p>재난방재청에서는 많은 비가 내리는 장마철에 대비해서 다음과 같은 일을 계획하고 있다. 먼저 어떤 지역의 높이 정보를 파악한다. 그 다음에 그 지역에 많은 비가 내렸을 때 물에 잠기지 않는 안전한 영역이 최대로 몇 개가 만들어 지는 지를 조사하려고 한다. 이때, 문제를 간단하게 하기 위하여, 장마철에 내리는 비의 양에 따라 일정한 높이 이하의 모든 지점은 물에 잠긴다고 가정한다.</p>\n<p>어떤 지역의 높이 정보는 행과 열의 크기가 각각 N인 2차원 배열 형태로 주어지며 배열의 각 원소는 해당 지점의 높이를 표시하는 자연수이다. 예를 들어, 다음은 N=5인 지역의 높이 정보이다.\n…</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">6</th>\n<th align=\"center\">8</th>\n<th align=\"center\">2</th>\n<th align=\"center\">6</th>\n<th align=\"center\">2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\">7</td>\n<td align=\"center\">3</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\">2</td>\n<td align=\"center\">5</td>\n<td align=\"center\">3</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">7</td>\n</tr>\n</tbody>\n</table>\n<p>이제 위와 같은 지역에 많은 비가 내려서 높이가 4 이하인 모든 지점이 물에 잠겼다고 하자. 이 경우에 물에 잠기는 지점을 <code class=\"language-text\">-</code>으로 표시하면 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">6</th>\n<th align=\"center\">8</th>\n<th align=\"center\">-</th>\n<th align=\"center\">6</th>\n<th align=\"center\">-</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\">7</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\">-</td>\n<td align=\"center\">5</td>\n<td align=\"center\">-</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n<td align=\"center\">5</td>\n<td align=\"center\">-</td>\n<td align=\"center\">7</td>\n</tr>\n</tbody>\n</table>\n<p>…</p>\n<p>위 예제 그래프에서 동서남북 방향으로 인접해 있는 영역을 구하면 총 5개가 된다.</p>\n<p>정리하자면 최소 높이부터 최대 높이에 대한 영역을 구하면서 최대값을 갱신하면 되는 문제이다.</p>\n<p>단, 문제 아래에 노트 부분에 <strong>“아무 지역도 물에 잠기지 않을 수도 있다.”</strong> 을 참고하면 최소 영역의 개수가 1개이상 나와야한다는 것을 알 수 있다.</p>\n<h1>Solution</h1>\n<h2>문제 접근 순서</h2>\n<ol>\n<li>그래프이고, 영역을 구하는 문제이므로 <code class=\"language-text\">DFS</code> 또는 <code class=\"language-text\">BFS</code>로 풀이 접근</li>\n<li>빗물의 기준을 계속 변경해가며 영역의 개수 파악.</li>\n<li>DFS 파라미터에 빗물의 기준을 넘겨줘서 조건을 설정.</li>\n</ol>\n<h2>문제 풀이</h2>\n<h3>1. 빗물의 범위 설정</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tcin <span class=\"token operator\">>></span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> mn<span class=\"token punctuation\">)</span> mn <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> mx<span class=\"token punctuation\">)</span> mx <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> mn<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mx<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>배열에 대한 높이를 입력받는 동시에 최대값, 최소값을 갱신한다.</p>\n<p>getCount는 영역의 개수를 구하는 함수로 매개변수로 빗물의 기준높이를 계속 넘겨준다.</p>\n<h3>2. 영역의 개수 구하기</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>visited<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>visited<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> idx <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//최대 안전 영역 갱신</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">)</span>\n\t\tresult <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>getCount()는 영역의 개수를 구한다. visited는 방문배열이다. getCount()가 한번 실행되면 visited를 다시 초기화 해주어야하기 때문에 fill() STL을 사용했다.</p>\n<p>count가 영역의 개수를 구하고 마지막에 최대값을 갱신하게 된다.</p>\n<p>그리고 <strong>빗물에 모두 잠기는 경우는 없다는 전제가 있기 때문에 result를 1로 설정</strong>했다.</p>\n<h3>3. DFS 함수</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> direct<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> idx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\tvisited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> nextX <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> direct<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> nextY <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> direct<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextX <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> nextX <span class=\"token operator\">>=</span> N <span class=\"token operator\">||</span> nextY <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> nextY <span class=\"token operator\">>=</span> N<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>nextX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nextY<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> idx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>nextX<span class=\"token punctuation\">,</span> nextY<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>매개변수에 idx를 넣어주었다. idx는 빗물의 높이 기준을 의미한다. 만약 idx가 4이면 높이가 5이상의 영역들만을 접근하여 영역의 개수를 구한다. 영역을 탐색하는 방법은 언제나 그랬듯이 direct 방향배열을 사용하여 4방향을 탐색했다.</p>\n<p>백준 DFS문제가 비슷하게 출제되는것 같다. 기본적인 DFS 개념에서 벗아나지 않아 잘 풀리는 것 같다.</p>\n<h1>Source</h1>\n<p><a href=\"https://github.com/MinByeongChan/myMBC/blob/master/Codetest/baekjoon/2468_SafeArea.cpp\">Github 전체소스</a></p>","frontmatter":{"title":"[백준] 2468 안전 영역","date":"January 09, 2020","description":null}}},"pageContext":{"slug":"/algorithm-BOJ-2468-post/","previous":{"fields":{"slug":"/algorithm-BOJ-10026-post/"},"frontmatter":{"title":"[백준] 10026 적록색약"}},"next":{"fields":{"slug":"/android-ch4-retrofit2-post/"},"frontmatter":{"title":"[Android] Retrofit2 GET 사용해서 데이터 조회"}}}},"staticQueryHashes":["1246554614","2841359383"]}