{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-ch2-props-post/","result":{"data":{"site":{"siteMetadata":{"title":"ByeongChan"}},"markdownRemark":{"id":"31cbe3ca-c071-5ec1-bacd-1969117d0248","excerpt":"React 가이드 참조해서 공부\ndi-it-라액트프로그래밍 정석 교재 참조해서 공부 컴포넌트 리액트는 기본적으로 컴포넌트별로 동작한다. 컴포넌트란, 각 HTML DOM에 대한 정보가 담겨있는 것이다. DOM…","html":"<p><a href=\"https://ko.reactjs.org/docs/rendering-elements.html\">React 가이드 참조해서 공부</a>\n<a href=\"\">di-it-라액트프로그래밍 정석 교재 참조해서 공부</a></p>\n<h1>컴포넌트</h1>\n<p>리액트는 기본적으로 컴포넌트별로 동작한다. 컴포넌트란, 각 HTML DOM에 대한 정보가 담겨있는 것이다. DOM에 대한 정보를 갖고 있다는것은 단순히 태그요소들만 있는 것 같은데, 데이터도 같이 같고 있다. 여기서 데이터를 props라 한다.</p>\n<p>컴포넌트 별로 동작하기 때문에 함수의 재활용 및 재사용이 훨씬 수월하고 Jquery와 달리 트리 형태로 컴파일 되면 속도가 현저히 느려지고, 순서대로 DOM 에 대한 정보를 불러오기 때문에 속도, 성능에서 모던 웹에서는 사용하기 불편하다. 하지만 리액트에서는 컴포넌트 별로 DOM 을 불러오기 때문에 (비동기적으로 불러온다) 모던웹에 적합하다 할 수 있다.</p>\n<p>리액트는 컴포넌트라는 강력한 요소를 갖고있어 여러 컴포넌트별로 DOM을 구성한다. 이렇게 컴포넌트로 구성하면 코드의 <code class=\"language-text\">재사용률이 높아져</code> 프로젝트의 중복되는 코드가 현저히 줄어든다.</p>\n<h1>props</h1>\n<p>props는 컴포넌트에서 사용되는 데이터이다. 예를 들어 <code class=\"language-text\">&lt;input data=&quot;&quot;&gt;</code>라는 태그에서 data는 props가 된다. html에서 사용했듯이 form으로 데이터를 보내거나 name을 참조하는 등 props는 다양한 방법으로 사용된다.</p>\n<p>props는 <code class=\"language-text\">읽기전용</code>이다. 따라서 <code class=\"language-text\">수정이 불가능한 요소</code>이다. 부모 컴포넌트로 전달받아 사용하는 것만 가능하다.</p>\n<h1>props 데이터 전달</h1>\n<p>컴포넌트에 데이터를 선언하는 방법을 보겠다. propsComponent라는 컴포넌트가 있고 안에는 특별한 것이 없는 DOM을 반환한다.</p>\n<h2>PropComponent 컴포넌트</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">\"prop-types\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PropComponenet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> PropsComponenet<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">&lt;div&gt;</code>태그 안에는 {}안에 데이터가 담겨 있는게 있는데 이것은 props 데이터를 적용하는 부분이다. 그럼 props.name이라는 데이터는 어디서 올까? 메인에서 온다.</p>\n<h2>App.js (메인)</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PropComponent</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>James<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    )\n  }\n}</span></code></pre></div>\n<h1>children</h1>\n<p>부모 컴포넌트로부터 자식 컴포넌트로 데이터를 전달하는 방법이 한가지가 더 있는데 바로 <code class=\"language-text\">children</code>이다.\nchildren은 태그 사이의 값을 전달한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PropComponent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello World</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">PropComponent</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>PropComponent 태그사이에 Hello World라는 값을 넣어줬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PropComponenet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> chidlren <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props\n\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">chidlren</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 부모에서 Hello World라는 값을 PropComponenet 컴포넌트에 전달했다. 자식 컴포넌트는 그 데이터를 props로 전달 받는다. props는 여러값을 갖는 객체로서 그 중 children을 참조하여 값을 가져온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> chidlren <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>chilren <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> chidlren <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props <span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 1, 2 같은 의미.</span></code></pre></div>\n<p>참고로 위 코드는 같다</p>\n<h1>Prop-types, 데이터 타입 명시</h1>\n<p>자바스크립트는 알다시피 var, let 처럼 데이터 타입을 선언하지 않는다. 어떻게 보면 편리한 것 같은데 불편한 점이 생긴다. 이를 방지하기 위해 prop-types라는 것이 있는데, 이는 데이터 타입을 고정시키는 것이다. 데이터 타입을 명시하고 초기값을 선언할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> PropType <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드를 import 해서 불러온다.</p>\n<h2>PropComponent 컴포넌트 with PropTypes</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">\"prop-types\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PropComponenet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> valueString<span class=\"token punctuation\">,</span> valueFunc <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message-container<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">valueString: </span><span class=\"token punctuation\">{</span>valueString<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">valueFunc: </span><span class=\"token punctuation\">{</span>valueFunc<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 데이터 타입 명시</span>\nPropComponenet<span class=\"token punctuation\">.</span>PropTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  valueString<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n  valueFunc<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> PropComponenet<span class=\"token punctuation\">;</span></code></pre></div>\n<p>PropTypes를 사용해서 데이터 타입을 명시한 코드이다. valueString이라는 변수는 string으로 명시해주었다. 따라서 valueString에는 string 이외에 다른 데이터타입이 올 수 없다. 함수도 마찬가지로 적용 가능하다. <code class=\"language-text\">func</code>를 명시하면 다른 데이터 타입은 올 수 있다.</p>\n<h2>필수 props</h2>\n<p>props 중 필수적으로 들어가는 데이터를 명시하고 싶다면 <code class=\"language-text\">isRequired</code>를 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 데이터 타입 명시</span>\nPropComponenet<span class=\"token punctuation\">.</span>PropTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  valueString<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  valueFunc<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위처럼 설정하면 valueString은 필수적으로 작성해야 컴파일이 완료된다.</p>","frontmatter":{"title":"[React] 컴포넌트 개념, props 데이터 전달방법","date":"July 26, 2020","description":null}}},"pageContext":{"slug":"/react-ch2-props-post/","previous":{"fields":{"slug":"/react-ch1-render-post/"},"frontmatter":{"title":"[React] 초기설정, JSX, 렌더링 및 기본 개념"}},"next":{"fields":{"slug":"/readability-post/"},"frontmatter":{"title":"Testing \"Readability\" with a Bunch of Text"}}}},"staticQueryHashes":["1246554614","2841359383"]}