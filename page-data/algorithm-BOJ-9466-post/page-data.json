{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm-BOJ-9466-post/","result":{"data":{"site":{"siteMetadata":{"title":"ByeongChan"}},"markdownRemark":{"id":"7367bc50-7acf-58e0-9d09-476bae39819e","excerpt":"Problem BOJ 946…","html":"<h1>Problem</h1>\n<p><a href=\"https://www.acmicpc.net/problem/9466\">BOJ 9466</a></p>\n<p>이번 가을학기에 ‘문제 해결’ 강의를 신청한 학생들은 텀 프로젝트를 수행해야 한다. 프로젝트 팀원 수에는 제한이 없다. 심지어 모든 학생들이 동일한 팀의 팀원인 경우와 같이 한 팀만 있을 수도 있다. 프로젝트 팀을 구성하기 위해, 모든 학생들은 프로젝트를 함께하고 싶은 학생을 선택해야 한다. (단, 단 한 명만 선택할 수 있다.) 혼자 하고 싶어하는 학생은 자기 자신을 선택하는 것도 가능하다.</p>\n<p>학생들이(s1, s2, …, sr)이라 할 때, r=1이고 s1이 s1을 선택하는 경우나, s1이 s2를 선택하고, s2가 s3를 선택하고,…, sr-1이 sr을 선택하고, sr이 s1을 선택하는 경우에만 한 팀이 될 수 있다.</p>\n<p>예를 들어, 한 반에 7명의 학생이 있다고 하자. 학생들을 1번부터 7번으로 표현할 때, 선택의 결과는 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">5</th>\n<th align=\"center\">6</th>\n<th align=\"center\">7</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">1</td>\n<td align=\"center\">3</td>\n<td align=\"center\">7</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n<td align=\"center\">6</td>\n</tr>\n</tbody>\n</table>\n<p>위의 결과를 통해 (3)과 (4, 7, 6)이 팀을 이룰 수 있다. 1, 2, 5는 어느 팀에도 속하지 않는다.</p>\n<p>주어진 선택의 결과를 보고 어느 프로젝트 팀에도 속하지 않는 학생들의 수를 계산하는 프로그램을 작성하라.</p>\n<h1>Solution</h1>\n<h2>문제 접근 순서</h2>\n<ol>\n<li>일단 각 노드는 한번 지목하게 되므로 단방향으로 풀이.</li>\n<li>각 노드의 값은 해당 노드가 지목하는 노드가 된다.</li>\n<li>dfs로 gragh가 형성되는 것을 확인하고 처음 start한 노드를 발견하면 탈출.</li>\n<li>싸이클(노드가 팀이 형성)이 형성된 노드들은 check배열로 구분.</li>\n</ol>\n<h2>문제 풀이</h2>\n<hr>\n<h3>시간 초과 풀이(실패)</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Gragh</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token comment\">// 팀을 이루었는지 검사</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t\tvisited<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> student<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> student<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// 첫 인덱스 발견시 check를 true</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> findX<span class=\"token punctuation\">)</span>\n\t\t\t\tcheck<span class=\"token punctuation\">[</span>findX<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token comment\">// DFS 동작</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">.</span>visited<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">.</span>visited<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">//첫 인덱스를 저장</span>\n\t\t\tG<span class=\"token punctuation\">.</span>findX <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t\tG<span class=\"token punctuation\">.</span><span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>각 노드들을 각각 dfs 진행시켰다. 매 경우마다 visited를 초기화하고 findX라는 변수로 스캔할 인덱스를 저장한다. 이후 dfs가 진행되고 현재 노드가 지목하는 대상이 findX라면 check하고 탈출한다.</p>\n<p>시간 효율이 딸릴것으로 예상했지만 단호하게 안될줄은 몰랐다 ㅋㅋㅋ</p>\n<h3>또다른 풀이</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//처음 온 인덱스는 방문 표시</span>\n\tvisited<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//다음 노드를 가리킴</span>\n\t<span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> student<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">//다음 노드가 방문되었으면 싸이클 여부 확인</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//방문은 했지만 싸이클 여부를 확인하지 않았다면 동작</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>check<span class=\"token punctuation\">[</span>next<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">//싸이클 여부 확인</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span> temp <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">;</span> temp <span class=\"token operator\">=</span> student<span class=\"token punctuation\">[</span>temp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\tresult<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">//자기 자신 카운트</span>\n\t\t\tresult<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//다음 노드를 처음 방문하면 dfs</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//마지막으로 check로 싸이클여부까지 모두 확인했다는 표시</span>\n\tcheck<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>유심히 봐야할 부분은 if와 check이다. 노드는 첫 방문을 하고 다음 노드에 대한 dfs를 진행시킨다. 모두 진행되고 다음 노드가 없을 경우 check를 true로 한다.</p>\n<p>check는 싸이클을 확인하는 용도로 사용된다. 싸이클이 체크되지 않았다는 것은 dfs는 진행되었지만 dfs함수를 아예 탈출 한 것이 아니기 때문에 싸이클 여부가 확인 가능하다.</p>\n<p>싸이클이 체크 안되었다면 for문안에서 연결되어있는 요소들을 카운트 한다.</p>\n<p>몹시 어렵고 복잡한 알고리즘이었다. dfs를 사용해서 싸이클을 만드는 코딩이 좀 복잡하고 난해해서 못풀었던 문제이다. 확실히 dfs를 전보다 이해하게 되는 계기가 되었던 문제였다.</p>\n<h1>Source</h1>\n<p><a href=\"https://github.com/MinByeongChan/myMBC/blob/master/Codetest/baekjoon/9466_TeamProject.cpp\">Github 전체소스</a></p>","frontmatter":{"title":"[백준] 9466 팀 프로젝트","date":"January 07, 2020","description":null}}},"pageContext":{"slug":"/algorithm-BOJ-9466-post/","previous":{"fields":{"slug":"/algorithm-PRMS-49994-post/"},"frontmatter":{"title":"[프로그래머스] 방문 길이"}},"next":{"fields":{"slug":"/android-ch3-activity-post/"},"frontmatter":{"title":"[Android] Activity와 AppCompatActivity의 차이점"}}}},"staticQueryHashes":["1246554614","2841359383"]}