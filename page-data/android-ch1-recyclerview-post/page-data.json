{"componentChunkName":"component---src-templates-blog-post-js","path":"/android-ch1-recyclerview-post/","result":{"data":{"site":{"siteMetadata":{"title":"ByeongChan"}},"markdownRemark":{"id":"a1831fa1-93ef-5459-8773-7be08a3674fc","excerpt":"RecyclerView란? recyclerview는 ListView를 보완하기 위해 나온것이다. ListView…","html":"<h1>RecyclerView란?</h1>\n<p>recyclerview는 ListView를 보완하기 위해 나온것이다. ListView는 모든 항목에 대한 메모리를 갖고 있다. 따라서 뷰에 대한 메모리가 모든 항목에 할당되어 리스트 크기가 커지면 메모리 낭비가 일어난다.</p>\n<p>이런 메모리 낭비를 보완하기 위해 나온 개념이 recyclerview이다. <strong>recycler</strong>라는 이름에서 알 수 있듯이 recyclerview는 리스트 크기가 커져도 <strong>보이지 않는 리스트</strong>에 대해서는 <strong>메모리 할당을 취소</strong>하여 메모리를 절약할 수 있게 한다.</p>\n<h2>recyclerView 생성</h2>\n<hr>\n<p>우선 recyclerView 뷰 객체를 사용하기 위해 build.gradle에 implementation을 해야한다.</p>\n<p>[build.gradle]</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">dependencies<span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n    implementation <span class=\"token string\">\"androidx.recyclerview:recyclerview:1.0.0\"</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>버전에 따라 사용법이 달라질 수 있으므로 안될경우 <a href=\"https://developer.android.com/reference/androidx/recyclerview/widget/package-summary.html\">AndroidDeveloper</a>를 참조하자.</p>\n<p>라이브러리를 등록했으면 recyclerView객체를 xml로 만들자.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>androidx.recyclerview.widget.RecyclerView</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/recycler_view<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>layout_constraintTop_toTopOf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>layout_constraintBottom_toBottomOf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>layout_constraintLeft_toLeftOf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>layout_constraintRight_toRightOf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>테스트 환경에서 나타낼 txtView xml파일도 있어야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextView</span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/txtView<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>textSize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>25dp<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>padding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8dp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TextView</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>환경설정 이후 이제 만들어봐야하는데, 먼저 RecyclerView를 만드는데 필요한 구성 요소들을 알아보자.</p>\n<h3>1. ViewHolder</h3>\n<p>ViewHolder는 view들의 ID를 가져와 등록해주는 역할을 한다. 등록되어있는 View들의 ID를 사전에 전부 등록한다. RecyclerView.ViewHolder를 상속한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token function\">TestViewHolder</span><span class=\"token punctuation\">(</span>\n    itemView<span class=\"token operator\">:</span> View\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RecyclerView<span class=\"token punctuation\">.</span><span class=\"token function\">ViewHolder</span><span class=\"token punctuation\">(</span>itemView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> txtView <span class=\"token operator\">=</span> itemView<span class=\"token punctuation\">.</span>textView\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>2. Adapter</h3>\n<p>Adapter는 recyclerView에 대한 항목을 구성하는 역할을 수행한다. ViewHolder에셔 정의 되어있는 View들을 생성하여 Layout에 보여주는 역할을 한다. 그렇기 때문에 Adapter가 사용되기 전에 반드시 ViewHolder를 만들어줘야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token function\">TestAdapter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> list<span class=\"token operator\">:</span> MutableList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n        RecyclerView<span class=\"token punctuation\">.</span>Adapter<span class=\"token operator\">&lt;</span>TestViewHolder<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreateViewHolder</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">:</span> ViewGroup<span class=\"token punctuation\">,</span> i<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TestViewHolder <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">TestViewHolder</span><span class=\"token punctuation\">(</span>LayoutInflater<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>item_main<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getItemCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span>size\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onBindViewHolder</span><span class=\"token punctuation\">(</span>holder<span class=\"token operator\">:</span> TestViewHolder<span class=\"token punctuation\">,</span> position<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">val</span> text <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span>\n            holder<span class=\"token punctuation\">.</span>txtView<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> text\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>getItemCount() : 항목의 개수를 판단하기 위한 함수.</li>\n<li>onBindViewHolder() : 각 항목을 구성하기 위한 함수.</li>\n<li>onCreateViewHolder() : 레이아웃XML 파일의 inflate를 담당. inflate된 view객체들을 ViewHolder의 생성자로 넘겨 ViewHolder에서 각 뷰 객체에 대한 ID를 얻는다.</li>\n<li>이렇게 얻은 ID를 갖고 Adapter내부에서 ViewHolder에 대한 메모리를 유지한다.</li>\n</ol>\n<p>1, 2과정만으로도 RecyclerView는 정상적으로 생성된다. 하지만 layout의 위치나 형태를 설정할 수는 없다. 그래서 필요한 것이 layoutManager이다.</p>\n<h3>3. LayoutManager</h3>\n<p>LayoutManager는 RecyclerView를 유지하기위한 필수 구성 요소이다. recyclerView가 linear하게 구성될지, grid하게 구성될지 등등 구성 방식들을 정의한다. LayoutManager는 다양한 Layout을 구성할 수 있도록 지원한다.</p>\n<ol>\n<li>LinearLayout</li>\n<li>RelativeLayout</li>\n<li>GridLayout 등등</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> linearManager <span class=\"token operator\">=</span> <span class=\"token function\">LinearLayoutManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// LinearLayoutManager에 대한 객체 생성</span>\nlinearManager<span class=\"token punctuation\">.</span>orientation <span class=\"token operator\">=</span> LinearLayoutManager<span class=\"token punctuation\">.</span>HORIZONTAL\nrecycler_View<span class=\"token punctuation\">.</span>layoutManager <span class=\"token operator\">=</span> linearManager</code></pre></div>\n<p>xml에서 설정하던 것 처럼 orientation을 사용하여 orientation을 설정할 수 있다. vertical 또는 horizontal 모두 가능하다.\n마지막은 recyclerView에 linearLayout을 적용하는 코드이다.\n(“recycler_View”는 ID를 의미)</p>\n<p>여기까지 해서 RecyclerView를 구성하는 작업을 마쳤다. 마무으리로 recyclerView를 생성해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">    <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> mutableListOf<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RecyclerList\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    recycler_View<span class=\"token punctuation\">.</span>layoutManager <span class=\"token operator\">=</span> <span class=\"token function\">LinearLayoutManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token label symbol\">@MainActivity</span><span class=\"token punctuation\">)</span>\n    recycler_View<span class=\"token punctuation\">.</span>adapter <span class=\"token operator\">=</span> <span class=\"token function\">TestAdapter</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span></code></pre></div>\n<p>recycler_View는 kotlin의 SAM을 적용하여 findViewByID를 생략하여 xml의 ID를 곧바로 가져온 것이다.</p>\n<p>먼저 LayoutManager를 호출하고, 위에서 작성한 Adapter를 실행시키면 끝이다.</p>","frontmatter":{"title":"[Android] RecyclerView의 개념 및 사용법","date":"December 19, 2019","description":null}}},"pageContext":{"slug":"/android-ch1-recyclerview-post/","previous":{"fields":{"slug":"/algorithm-BOJ-2294-post/"},"frontmatter":{"title":"[백준] 2294 동전2"}},"next":{"fields":{"slug":"/algorithm-BOJ-2644-post/"},"frontmatter":{"title":"[백준] 2644 촌수계산"}}}},"staticQueryHashes":["1246554614","2841359383"]}