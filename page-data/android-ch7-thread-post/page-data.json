{"componentChunkName":"component---src-templates-blog-post-js","path":"/android-ch7-thread-post/","result":{"data":{"site":{"siteMetadata":{"title":"ByeongChan"}},"markdownRemark":{"id":"bd81e199-c681-59c9-84a8-cb24c38036a7","excerpt":"광부 금광캐는광부 참조해서 공부 Thread란? 쓰레드는 작업(실행)의 단위이다. 어떤 프로세스가 자원을 할당 받고, 프로그램이 실행이 될 때, 작업의 수행을 쓰레드가 담당하게 된다. 한개의 작업을 수행하는데 10초가 걸린다고 가정하자. 1…","html":"<style>\n    .android {\n        color: green;\n    } \n</style>\n<p><a href=\"https://itmining.tistory.com/4\">광부 금광캐는광부 참조해서 공부</a></p>\n<h1>Thread란?</h1>\n<p>쓰레드는 작업(실행)의 단위이다. 어떤 프로세스가 자원을 할당 받고, 프로그램이 실행이 될 때, 작업의 수행을 쓰레드가 담당하게 된다. 한개의 작업을 수행하는데 10초가 걸린다고 가정하자. 10초 후에 다른 작업을 수행해야하므로 비효율 적일 수 있다. 이러한 경우에 쓰레드를 사용하게 되어 작업을 병렬적으로 수행하여 다른 작업을 동시에 수행할 수 있다.</p>\n<p>쓰레드는 효율적으로 사용할 수도 있지만, 리소스를 많이 사용하게 된다. 실제로 쓰레드 전환 시 사용되는 컨텍스트 스위치는 많은 자원을 소비하는 것으로 알고 있다. 그래서 너무 많은 쓰레드를 사용하는 것은 오히려 비효율적으로 다가올 수 있다.</p>\n<hr>\n<h1>기본적인 쓰레드 사용방법</h1>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>kotlin 에서 더 좋게 표현 할 수 있는 방법이 있을지 모르겠지만, 위 소스는 자바 기반의 소스를 코틀린에 그대로 옮긴 코드다.</p>\n<p>쓰레드를 생성할 때 Runnable객체를 같이 사용하게 된다. runnable은 단순히 인터페이스이고 run()메서드에서 쓰레드 동작이 이뤄진다. 위 예제는 별 특이점이 없이 출력만을 한다.</p>\n<p>하지만, 다른 메인스레드가 어떤 수행을 할 때, 새롭게 생성된 쓰레드는 병렬적으로 동작해서 작업의 효율을 높일 수 있다.</p>\n<hr>\n<h1>쓰레드 종료</h1>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppCompatActivity</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ExampleThread</span> thread<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TAG\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"메인스레드 시작\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExampleThread</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            thread<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TAG\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"메인스레드 종료\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ExampleThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//init</span>\n            num <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TAG\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Thread start\"</span><span class=\"token operator\">+</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TAG\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Thread end\"</span><span class=\"token operator\">+</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>결과 :</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">D</span><span class=\"token operator\">/</span>TAG<span class=\"token operator\">:</span> 메인스레드 시작\n<span class=\"token class-name\">D</span><span class=\"token operator\">/</span>TAG<span class=\"token operator\">:</span> <span class=\"token class-name\">Thread</span> start0\n<span class=\"token class-name\">D</span><span class=\"token operator\">/</span>TAG<span class=\"token operator\">:</span> <span class=\"token class-name\">Thread</span> start2\n<span class=\"token class-name\">D</span><span class=\"token operator\">/</span>TAG<span class=\"token operator\">:</span> <span class=\"token class-name\">Thread</span> start1\n<span class=\"token class-name\">D</span><span class=\"token operator\">/</span>TAG<span class=\"token operator\">:</span> <span class=\"token class-name\">Thread</span> end2\n<span class=\"token class-name\">D</span><span class=\"token operator\">/</span>TAG<span class=\"token operator\">:</span> <span class=\"token class-name\">Thread</span> end0\n<span class=\"token class-name\">D</span><span class=\"token operator\">/</span>TAG<span class=\"token operator\">:</span> 메인스레드 종료\n<span class=\"token class-name\">D</span><span class=\"token operator\">/</span>TAG<span class=\"token operator\">:</span> <span class=\"token class-name\">Thread</span> end1</code></pre></div>\n<p>join()은 메인 쓰레드의 종료를 기다리는 함수이다. 결과를 보면 메인쓰레드보다 늦게 종료되는 쓰레드를 발견할 수 있다. 뭔가 잘못된건가 싶을 수 도 있지만 잘못된게 아니다. 쓰레드는 순서가 없다. 따라서 실행되는 시점은 정해졌으나 종료되는 시점은 각각 다를 수 있다. 그래서 쓰레드가 점점 많이 지면 다루기가 힘들 수 있다는 얘기다.</p>\n<hr>","frontmatter":{"title":"[Android] 쓰레드 개념, 사용법, UI 처리","date":"March 01, 2020","description":null}}},"pageContext":{"slug":"/android-ch7-thread-post/","previous":{"fields":{"slug":"/algorithm-PRMS-12981-post/"},"frontmatter":{"title":"[프로그래머스] 영어 끝말잇기"}},"next":{"fields":{"slug":"/jquery-ch2-getset-post/"},"frontmatter":{"title":"[Jquery] HTML 요소 접근 방법, GET/SET"}}}},"staticQueryHashes":["1246554614","2841359383"]}