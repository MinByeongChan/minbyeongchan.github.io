{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-ch10-redux4-post/","result":{"data":{"site":{"siteMetadata":{"title":"ByeongChan"}},"markdownRemark":{"id":"3ace3d90-ed35-5d59-b7a2-69482e31f8b6","excerpt":"개요 이전 예제에서 데이터 컴포넌트가 리덕스 스토어를 불러오는, 그리고 리듀서를 dispatch하는 것 까지 해봤다. 그런데 리덕스를 사용하기 위해 번거로운 작업들이 좀 많다. connect를 사용하는 별도의 컨테이너까지 만들어서 사용하기도 한다. 이러한 작업을 좀 줄이기 위해 hook…","html":"<h1>개요</h1>\n<p>이전 예제에서 데이터 컴포넌트가 리덕스 스토어를 불러오는, 그리고 리듀서를 dispatch하는 것 까지 해봤다. 그런데 리덕스를 사용하기 위해 번거로운 작업들이 좀 많다. connect를 사용하는 별도의 컨테이너까지 만들어서 사용하기도 한다. 이러한 작업을 좀 줄이기 위해 hook이 도입됐다.</p>\n<p>리액트에서 hook이 도입되면서 부터 리덕스 마찬가지로 hook사용을 권장하고 있다. 그래서 리덕스 hook을 간단히 정리하려 한다.</p>\n<h1>적용 예제</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">\"prop-types\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect<span class=\"token punctuation\">,</span> useDispatch<span class=\"token punctuation\">,</span> useSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> addFood <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./action/FoodAction\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Redux02</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>input<span class=\"token punctuation\">,</span> setInput<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> foods <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foods<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>foodReducer<span class=\"token punctuation\">.</span>foods <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onInputChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setInput</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClickBtn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">addFood</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      This is Redux Test\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"input1\"</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onInputChange<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">\"    \"</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClickBtn<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>추가<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Foods List<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>foods<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Redux02</code></pre></div>\n<p>저번 예제를 동일하게 가져왔다. 그리고 connect함수를 사용하지 않고, <code class=\"language-text\">useSelector</code>, <code class=\"language-text\">useDispatch</code>라는 훅 함수를 대체하기만 했다.</p>\n<ol>\n<li>\n<p>useSelector</p>\n<ul>\n<li>리덕스 스토어에 있는 state를 가져오는 함수이다.</li>\n<li>getStore(), mapStateToProps함수의 기능을 담당한다.</li>\n<li>파라미터로 state를 받고 state에 대한 key값을 가져와 변수에 저장해야한다.</li>\n</ul>\n</li>\n<li>\n<p>useDispatch</p>\n<ul>\n<li>dispatch()를 가져오는 함수이다.</li>\n<li>mapDispatchToProps()의 기능을 담당한다.</li>\n<li>이전 dispatch사용법과 동일하다.</li>\n</ul>\n</li>\n</ol>\n<p>이렇게 리덕스 hook을 사용해서 이전보다 깔끔하고 편리하게 코드를 짤 수 있게 됐다.</p>\n<p>굿굿</p>\n<iframe src=\"https://codesandbox.io/embed/festive-hooks-su4hv?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"festive-hooks-su4hv\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>","frontmatter":{"title":"[React] Redux hook으로 Redux 편하게 사용하기","date":"December 20, 2020","description":null}}},"pageContext":{"slug":"/react-ch10-redux4-post/","previous":{"fields":{"slug":"/react-ch9-redux3-post/"},"frontmatter":{"title":"[React] Redux, connect dispatch를 이용한 스토어 데이터 가져오기"}},"next":{"fields":{"slug":"/react-ch11-useState-post/"},"frontmatter":{"title":"[React hook] hook에 대한 정리, hook에서의 state관리 useState"}}}},"staticQueryHashes":["1246554614","2841359383"]}