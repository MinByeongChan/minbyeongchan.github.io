{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm-PRMS-12981-post/","result":{"data":{"site":{"siteMetadata":{"title":"ByeongChan"}},"markdownRemark":{"id":"60dde8e8-7763-51ac-952d-abfe2cd81f00","excerpt":"Problem PROGRAMMERS 영어 끝말잇기 1부터 n까지 번호가 붙어있는 n명의 사람이 영어 끝말잇기를 하고 있습니다. 영어 끝말잇기는 다음과 같은 규칙으로 진행됩니다. 1번부터 번호 순서대로 한 사람씩 차례대로 단어를 말합니다. 마지막 사람이 단어를 말한 다음에는 다시…","html":"<h1>Problem</h1>\n<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/12981\">PROGRAMMERS 영어 끝말잇기</a></p>\n<p>1부터 n까지 번호가 붙어있는 n명의 사람이 영어 끝말잇기를 하고 있습니다. 영어 끝말잇기는 다음과 같은 규칙으로 진행됩니다.</p>\n<ol>\n<li>1번부터 번호 순서대로 한 사람씩 차례대로 단어를 말합니다.</li>\n<li>마지막 사람이 단어를 말한 다음에는 다시 1번부터 시작합니다.</li>\n<li>앞사람이 말한 단어의 마지막 문자로 시작하는 단어를 말해야 합니다.</li>\n<li>이전에 등장했던 단어는 사용할 수 없습니다.</li>\n<li>한 글자인 단어는 인정되지 않습니다.</li>\n</ol>\n<p>다음은 3명이 끝말잇기를 하는 상황을 나타냅니다.</p>\n<p>tank → kick → know → wheel → land → dream → mother → robot → tank</p>\n<p>위 끝말잇기는 다음과 같이 진행됩니다.</p>\n<ul>\n<li>1번 사람이 자신의 첫 번째 차례에 tank를 말합니다.</li>\n<li>2번 사람이 자신의 첫 번째 차례에 kick을 말합니다.</li>\n<li>3번 사람이 자신의 첫 번째 차례에 know를 말합니다.</li>\n<li>1번 사람이 자신의 두 번째 차례에 wheel을 말합니다.</li>\n<li>(계속 진행)</li>\n</ul>\n<p>끝말잇기를 계속 진행해 나가다 보면, 3번 사람이 자신의 세 번째 차례에 말한 tank 라는 단어는 이전에 등장했던 단어이므로 탈락하게 됩니다.</p>\n<p>사람의 수 n과 사람들이 순서대로 말한 단어 words 가 매개변수로 주어질 때, 가장 먼저 탈락하는 사람의 번호와 그 사람이 자신의 몇 번째 차례에 탈락하는지를 구해서 return 하도록 solution 함수를 완성해주세요.</p>\n<h1>Solution</h1>\n<h2>문제 접근 순서</h2>\n<p>매우 간단한 알고리즘으로 풀이</p>\n<ol>\n<li>배열을 하나 생성해 중복을 체크</li>\n<li>생성한 배열의 마지막 인덱스와 다음 차례의 문자를 비교</li>\n<li>배열 마지막 인덱스의 끝자리와 다음 차례 문자의 첫자리를 비교</li>\n</ol>\n<hr>\n<h2>문제 풀이</h2>\n<h3>main</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> words<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">answer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> Size <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> person <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> turn <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\tresult<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tperson <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\tcout <span class=\"token operator\">&lt;&lt;</span> person <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> turn <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_right</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">checkWord</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tcout <span class=\"token operator\">&lt;&lt;</span> words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t\tresult<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tanswer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> person<span class=\"token punctuation\">;</span>\n\t\t\tanswer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> turn<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\tturn<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>words에 주어진 문자 배열이 주어지고, n은 사람 수를 의미한다. 틀린 사람의 인덱스와 틀린 사람의 차례를 answer배열에 각각 넣어 반환하는 함수이다.</p>\n<p>person과 turn은 %를 사용하여 계산하였다.</p>\n<p>중복체크 함수와 끝말잇기가 맞는지 확인하는 함수 두 개를 작성해서 풀었다. 둘 중 하나라도 false가 뜨면 for문이 종료되어 person과 turn이 반환되도록 구현했다.</p>\n<hr>\n<h3>문자 중복 점검 함수</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 중복 점검 함수</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">is_right</span><span class=\"token punctuation\">(</span>string word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> Size <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> word<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>result는 전역으로 선언되어있고 word와 같은 것이 존재하면 false를 반환한다.</p>\n<hr>\n<h3>끝말잇기 확인 함수</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">checkWord</span><span class=\"token punctuation\">(</span>string word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">int</span> Size <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstring s <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> word<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>result에 담긴 요소중 마지막 인덱스의 마지막 글자와 word의 첫번째 인자를 비교해서 다르면 false를 반환한다.</p>\n<hr>\n<h1>Source</h1>\n<p><a href=\"https://github.com/MinByeongChan/myMBC/blob/master/Codetest/Programmers/12981_WordGame.cpp\">Github 전체소스</a></p>","frontmatter":{"title":"[프로그래머스] 영어 끝말잇기","date":"February 04, 2020","description":null}}},"pageContext":{"slug":"/algorithm-PRMS-12981-post/","previous":{"fields":{"slug":"/algorithm-PRMS-49993-post/"},"frontmatter":{"title":"[프로그래머스] 스킬트리"}},"next":{"fields":{"slug":"/android-ch7-thread-post/"},"frontmatter":{"title":"[Android] 쓰레드 개념, 사용법, UI 처리"}}}},"staticQueryHashes":["1246554614","2841359383"]}