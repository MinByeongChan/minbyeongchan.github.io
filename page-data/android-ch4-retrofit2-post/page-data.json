{"componentChunkName":"component---src-templates-blog-post-js","path":"/android-ch4-retrofit2-post/","result":{"data":{"site":{"siteMetadata":{"title":"ByeongChan"}},"markdownRemark":{"id":"1ba502d2-7618-5539-beda-24b3a60ad9aa","excerpt":"Retrofit2란? Retrofit2라이브러리는 안드로이드에서 RestAPI를 사용할 수 있게 하는 기능이다. 사전 등록 라이브러리 등록 먼저 안드로이드 grade(module:app)에서 dependencies를 등록해야한다. retrofit2 버전은 Restrofit…","html":"<style>\n    .android {\n        color: green;\n    } \n</style>\n<h1>Retrofit2란?</h1>\n<p>Retrofit2라이브러리는 안드로이드에서 RestAPI를 사용할 수 있게 하는 기능이다.</p>\n<hr>\n<h2>사전 등록</h2>\n<h3>라이브러리 등록</h3>\n<p>먼저 안드로이드 grade(module:app)에서 <strong>dependencies</strong>를 등록해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// retrofit2</span>\n    def gson_ver <span class=\"token operator\">=</span> <span class=\"token string\">\"2.7\"</span>\n    def retro_ver <span class=\"token operator\">=</span> <span class=\"token string\">\"2.6.0\"</span>\n    implementation <span class=\"token string\">\"com.google.code.gson:gson:<span class=\"token interpolation variable\">$gson_ver</span>\"</span>\n    implementation <span class=\"token string\">\"com.squareup.retrofit2:retrofit:<span class=\"token interpolation variable\">$retro_ver</span>\"</span>\n    implementation <span class=\"token string\">\"com.squareup.retrofit2:converter-gson:<span class=\"token interpolation variable\">$retro_ver</span>\"</span></code></pre></div>\n<p>retrofit2 버전은 <a href=\"https://square.github.io/retrofit\">Restrofit</a>에서 자세히 살펴볼 수 있다. 뿐만 아니라 각 함수에 대한 정보도 있으니 자세히 살펴보자.</p>\n<p><strong>또다른 방법</strong>은</p>\n<p>단축기 <code class=\"language-text\">Lctrl+Lshift+Lalt+s</code> -> <code class=\"language-text\">왼쪽 Dependencies</code> -> <code class=\"language-text\">Declared Dependencies에서 +</code> -> <code class=\"language-text\">1. Library dependencies</code></p>\n<p>에서 검색하고 등록할 수 있다.</p>\n<hr>\n<h3>manifest 설정</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token operator\">&lt;</span>uses<span class=\"token operator\">-</span>permission android<span class=\"token operator\">:</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"android.permission.INTERNET\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>application<span class=\"token operator\">></span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>application<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">&lt;application&gt;</code>태그 위에 인터넷 permission을 설정한다.</p>\n<hr>\n<h2>적용 방법</h2>\n<p>먼저 내가 사용했던 예제는 JSON형식을 GSON변환을 하고 retrofit2에 적용하여 사용했다.</p>\n<hr>\n<h3>JSON 형식?</h3>\n<p>적용하기전에 JSON형식에 대해 간단히 언급하자면, JSON은 간단하게 말하면 웹 통신을 하기 위한 파일 형식이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">{ \"statusCode\": 200, \"body\": { \"id\": 1 \"name\" : \"MBC\" } }</code></pre></div>\n<p>다음과 같은 형식을 나타내고 “키”: “데이터”의 형식으로 구성되어있다. 1번째 인자는 키가 statusCode이고 그에 해당하는 데이터는 200(Integer)이다.</p>\n<p>2번째 인자는 특이하다. JSON Array이다. JSON도 데이터를 리스트 형식으로 받을 수 있게 구성되어있다. 이 부분에서 많이 헤맸다…</p>\n<p>body는 id와 name인자가 존재한다. 안드로이드에서 구현할 때에도 이 부분을 유념하고 코드를 작성해야한다.</p>\n<hr>\n<h3>안드로이드 데이터 클래스(VOClass)</h3>\n<p>방금 언급한 데이터 클래스에 대한 정보를 작성하겠다.</p>\n<p>참고로 <a href=\"http://www.jsonschema2pojo.org/\">JSON -> Java클래스로 변환해주는 사이트</a>를 참조하면 접근하고 싶은 JSON URL에 대한 정보를 입력만 하면 클래스를 간편하게 구현시켜준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">BodyList</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation builtin\">@SerializedName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"statusCode\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> statusCode<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@SerializedName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> body<span class=\"token operator\">:</span> Body\n<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Body</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token annotation builtin\">@SerializedName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> id<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@SerializedName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>데이터클래스를 작성했는데 BodyList에서 첫번째 인자인 StatusCode에 대한 인자, 두번째는 Body에 대한 인자가 있다.</p>\n<p>Body는 아래 데이터클래스로 id와 name을 갖는 인자를 포함한다.</p>\n<p><code class=\"language-text\">@SerializeName</code> : JSON에서 키값에 접근하기 위한 어노테이션이다. GSON에서 제공하며 키를 갖고 JSON과 비교한다.</p>\n<hr>\n<h3>RestAPI 인터페이스</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> APIService <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/prod/products\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Call<span class=\"token operator\">&lt;</span>BodyList<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>GET으로 데이터를 조회만 할 것이기 때문에 리턴 값만을 수정한다. BodyList는 위에 있던 JSON형식을 그대로 딴 것이다.</p>\n<p>Body형식은 각 프로젝트마다 다를 수 있으니 잘 알아보고 주의해야한다. 이것땜에 시간 엄청 걸렸다.</p>\n<p>json형식이 array인지 단일 인자인지 정확히 인지하고 body를 구성해야한다.</p>\n<hr>\n<h3>okhttp interceptor 추가</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">//interceptor 선언</span>\n<span class=\"token keyword\">val</span> interceptor <span class=\"token operator\">=</span> <span class=\"token function\">HttpLoggingInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ninterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">setLevel</span><span class=\"token punctuation\">(</span>HttpLoggingInterceptor<span class=\"token punctuation\">.</span>Level<span class=\"token punctuation\">.</span>BODY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> client <span class=\"token operator\">=</span> OkHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>interceptor는 http통신을 하기 위해 사용된다. 연결시도를 지속적으로 해줌으로서 연결이 원활히 가능하게 만들어준다.</p>\n<h3>retrofit 객체 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> URL<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"사용할 base URL\"</span>\n\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_login<span class=\"token punctuation\">)</span>\n\n\n        <span class=\"token comment\">//interceptor 선언</span>\n        <span class=\"token keyword\">val</span> interceptor <span class=\"token operator\">=</span> <span class=\"token function\">HttpLoggingInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">setLevel</span><span class=\"token punctuation\">(</span>HttpLoggingInterceptor<span class=\"token punctuation\">.</span>Level<span class=\"token punctuation\">.</span>BODY<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> client <span class=\"token operator\">=</span> OkHttpClient<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// 통신하기 위한 retrofit 객체 생성</span>\n        <span class=\"token keyword\">val</span> retrofit <span class=\"token operator\">=</span> Retrofit<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">baseUrl</span><span class=\"token punctuation\">(</span>URL<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">addConverterFactory</span><span class=\"token punctuation\">(</span>GsonConverterFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">client</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span> <span class=\"token comment\">// interceptor 추가</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">val</span> api <span class=\"token operator\">=</span> retrofit<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>APIService<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n\n        api<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> Callback<span class=\"token operator\">&lt;</span>BodyList<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span>\n                call<span class=\"token operator\">:</span> Call<span class=\"token operator\">&lt;</span>BodyList<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n                response<span class=\"token operator\">:</span> Response<span class=\"token operator\">&lt;</span>BodyList<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TAG\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onResponse\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span>\n                call<span class=\"token operator\">:</span> Call<span class=\"token operator\">&lt;</span>BodyList<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n                t<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TAG\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onFailure\"</span><span class=\"token punctuation\">)</span>\n                t<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>아까 생성했던 inteceptor를 retorfit객체를 생성할 때 추가한다.</li>\n<li>addConverterFactory는 Gson형식으로 변환해주기 위한 함수이다.</li>\n<li>마지막에 build()를 해야 retrofit 객체가 동작한다.</li>\n<li>retrofit을 생성하고 객체를 생성한다.</li>\n<li>RestAPI 인터페이스에서 생성했던 함수를 사용한다.</li>\n<li>통신이 월활하게 되면 onResponse()로 들어가게 된다.</li>\n<li>통신이 원활하게 안된다면 onFailure()로 들어간다.</li>\n<li>t.printStackTrace()은 http오류를 출력해준다. 오류를 쉽게 확인할 수 있게 해준다.(추가로 interceptor를 추가하면 기존에 못찾던 오류내용을 상세히 보여주기도 한다.)</li>\n</ul>\n<p>이번에 GET()만 사용해서 넣었는데 추후 POST도 어느정도 진행되면 추가할 계획이다.</p>","frontmatter":{"title":"[Android] Retrofit2 GET 사용해서 데이터 조회","date":"January 15, 2020","description":null}}},"pageContext":{"slug":"/android-ch4-retrofit2-post/","previous":{"fields":{"slug":"/algorithm-BOJ-2468-post/"},"frontmatter":{"title":"[백준] 2468 안전 영역"}},"next":{"fields":{"slug":"/algorithm-PRMS-12930-post/"},"frontmatter":{"title":"[프로그래머스] 이상한 문자 만들기"}}}},"staticQueryHashes":["1246554614","2841359383"]}