{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-ch8-redux2-post/","result":{"data":{"site":{"siteMetadata":{"title":"ByeongChan"}},"markdownRemark":{"id":"bd85a55c-1a65-51e0-9db9-547d9f3a29f7","excerpt":"리덕스는 크게 액션, 리듀서, 스토어 3개로 구분된다. 앞서 동작 원리를 알아봤으니, 실제 사용 방법을 다시한번 복기하자. 리덕스 설치 먼저 리액트에 적용시킬 리덕스부터 설치해야한다. 명령어는 다음과 같다. 리덕스 패턴 덕스(DUX…","html":"<p>리덕스는 크게 액션, 리듀서, 스토어 3개로 구분된다. 앞서 동작 원리를 알아봤으니, 실제 사용 방법을 다시한번 복기하자.</p>\n<h1>리덕스 설치</h1>\n<p>먼저 리액트에 적용시킬 리덕스부터 설치해야한다. 명령어는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> redux react-redux</code></pre></div>\n<h1>리덕스 패턴</h1>\n<h2>덕스(DUX) 패턴</h2>\n<p>리덕스가 기본적으로 가이드하고 있는 덕스 패턴이라는 것이 존재한다. 프로젝트 구조상 특이한 점이 없다면 덕스패턴으로도 충분히 커버가 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">-ProjectRoot\n  -src\n    -reducers\n      -index.js\n      -A_action.js\n\n    -actions\n      -index.js\n      -A_reducer.js\n\n    -App.js</code></pre></div>\n<p>리액트는 기본적으로 폴더 안에 index.js를 가장 먼저 실행시키도록 구성되어있다. 따라서 reducers를 import하면 reducers 안에 index.js가 실행된다.</p>\n<p>이렇게 리듀서와 액션을 구분해서 관리하면 프로젝트를 유지보수면에서 훨씬 수월하게 만들 수 있다. 이제 덕스패턴을 사용해서 구조를 짜보자.</p>\n<p>아래부터는 먹을 것을 등록하는 리덕스 예제를 구현해보았다.</p>\n<h1>리덕스 액션</h1>\n<p>액션은 말그대로 행동만 취해주면 된다. 리듀서를 실행시키기 위한 하나의 신호로 생각하자.</p>\n<h2>action 선언</h2>\n<h3>src/actions/food.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 액션</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">ADD_FOOD</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ADD_FOOD\"</span>\n\n<span class=\"token comment\">// 액션 동작 함수</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addFood</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">food</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">ADD_FOOD</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token operator\">:</span> food<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>액션은 기본적으로 타입과 동작 함수로 구성된다. 먹을것을 더해주는 <code class=\"language-text\">ADD_FOOD</code>타입과 payload로 food 파라미터를 받아 넘겨주도록 구성된다.</p>\n<h3>src/actions/index.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ADD_FOOD</span><span class=\"token punctuation\">,</span> addFood <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./FoodAction\"</span></code></pre></div>\n<p>지금은 액션이 음식에 대한 액션밖에 없지만 다른 액션이 여러개 존재할 수 있다. 액션들이 많아짐에 따라 묶어주기 위해 index.js에 액션들을 모아주자.</p>\n<h2>Reducer 선언</h2>\n<h3>src/reducers/FoodReducer.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 액션</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ADD_FOOD</span><span class=\"token punctuation\">,</span> addFood <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../action/FoodAction\"</span>\n\n<span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foods<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 리듀서(reducer)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foodReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">ADD_FOOD</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        foods<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>foods<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> foodReducer</code></pre></div>\n<p>리듀서는 액션을 받아 동작을 실행시켜준다고 언급했다. 어떻게 동작하는지 아라보자.</p>\n<p>리듀서 함수는 state와 action을 파라미터로 받는다. <code class=\"language-text\">state는 현재 스토어의 데이터를 의미</code>한다. 처음 초기값을 넣기 위해 initState라는 값을 넣었다.</p>\n<p>잎사 등록한 액션을 action/index.js에서 불러온다. 액션은 리듀서 내부 <code class=\"language-text\">switch-case 문</code> 안에서 구분되어 해당 case에서 처리되는 구조로 동작한다.</p>\n<p>위 예제는 food를 추가만 해주기 때문에 번거로운 과정 없이 <code class=\"language-text\">전개연산자(Spread Oprator)</code>를 사용하여 추가한다.</p>\n<h3>src/reducers/index.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux\"</span>\n<span class=\"token keyword\">import</span> foodReducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./FoodReducer\"</span>\n\n<span class=\"token keyword\">const</span> rootReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foodReducer <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> rootReducer</code></pre></div>\n<p>액션에서와 마찬가지로 여러개의 리듀서를 reducers/index.js에서 묶어주자. 묶어줄 떄, redux에서 제공하는 <code class=\"language-text\">combineReducers</code> 함수를 사용한다.</p>\n<hr>\n<p>액션과 리듀서 설정을 모두 마쳤다. 이제 스토어를 등록해야한다.</p>\n<h2>스토어 선언</h2>\n<h3>/configureStore.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> composeWithDevTools <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux-devtools-extension\"</span>\n<span class=\"token keyword\">import</span> rootReducer <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Redux/reducer\"</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>rootReducer<span class=\"token punctuation\">,</span> <span class=\"token function\">composeWithDevTools</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>redux에서 제공하는 <code class=\"language-text\">createStroe</code>함수를 사용해서 스토어를 생성한다.</p>\n<p>스토어에는 앞서 생성한 reducer를 넣고, 2번째 파라미터로 <code class=\"language-text\">composeWithDevTools</code>가 온다. <code class=\"language-text\">composeWithDevTools</code>는 크롬에서 제공하는 툴이다.</p>\n<p>F12 -> redux를 확인해보면 리덕스의 액션, 스토어의 히스토리 등이 확인 가능하다. 리덕스를 사용한다면 이러한 미들웨어를 설치하는 것이 편리하다. (이외에 logger들도 존재한다.)</p>\n<h3>/App.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> logo <span class=\"token keyword\">from</span> <span class=\"token string\">\"./logo.svg\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./App.css\"</span>\n<span class=\"token keyword\">import</span> Redux02 <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Redux/Redux02\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./configureStore\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Redux02<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Redux02<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>설정한 스토어를 <code class=\"language-text\">Provider</code>에 넣으면 내부 App 내부에 쌓여있는 Component들은 스토어를 사용할 수 있게 된다.</p>\n<hr>\n<p>모든 설정이 끝났다. 이제 설정한 액션 및 리듀서를 갖고 컴포넌트에서 스토어를 활용하면 된다. 근데 너무 힘들다. 나머진 내일해야지.</p>\n<p>리덕스는 위처럼 설정 및 추가해야하는 것들이 몇가지 존재한다. 그리고 리덕스의 패턴, 기본 개념도 알고있어야한다. 하지만, 아는 만큼 혜택이 어마어마하게 다가온다. 스토어를 간편하게 관리할 수 있다. 그리고 각 컴포넌트들은 스토어를 찾고 갖다 쓰기만 하면 된다. 감히 리덕스의 꽃이라고 말하고 싶다.</p>","frontmatter":{"title":"[React] Redux, 스토어에 데이터 저장하는 방법","date":"December 17, 2020","description":null}}},"pageContext":{"slug":"/react-ch8-redux2-post/","previous":{"fields":{"slug":"/react-ch7-redux1-post/"},"frontmatter":{"title":"[React] Redux, 공용 데이터 저장소 개념"}},"next":{"fields":{"slug":"/react-ch9-redux3-post/"},"frontmatter":{"title":"[React] Redux, connect dispatch를 이용한 스토어 데이터 가져오기"}}}},"staticQueryHashes":["1246554614","2841359383"]}