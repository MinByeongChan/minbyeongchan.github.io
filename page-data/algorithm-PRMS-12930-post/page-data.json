{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm-PRMS-12930-post/","result":{"data":{"site":{"siteMetadata":{"title":"ByeongChan"}},"markdownRemark":{"id":"abe5c9d4-4196-55a8-abf3-8b6a613a24f3","excerpt":"Problem PROGRAMMERS 이상한 문자 만들기 문자열 s는 한 개 이상의 단어로 구성되어 있습니다. 각 단어는 하나 이상의 공백문자로 구분되어 있습니다. 각 단어의 짝수번째 알파벳은 대문자로, 홀수번째 알파벳은 소문자로 바꾼 문자열을 리턴하는 함수, solution…","html":"<h1>Problem</h1>\n<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/12930\">PROGRAMMERS 이상한 문자 만들기</a></p>\n<p>문자열 s는 한 개 이상의 단어로 구성되어 있습니다. 각 단어는 하나 이상의 공백문자로 구분되어 있습니다. 각 단어의 짝수번째 알파벳은 대문자로, 홀수번째 알파벳은 소문자로 바꾼 문자열을 리턴하는 함수, solution을 완성하세요.</p>\n<p><strong>제한 사항</strong></p>\n<p>문자열 전체의 짝/홀수 인덱스가 아니라, 단어(공백을 기준)별로 짝/홀수 인덱스를 판단해야합니다.\n첫 번째 글자는 0번째 인덱스로 보아 짝수번째 알파벳으로 처리해야 합니다.</p>\n<h1>Solution</h1>\n<h2>문제 접근 순서</h2>\n<ol>\n<li>공백 기준으로 문자를 끈음</li>\n<li>끈은 지점까지 tmp에 저장</li>\n<li>tmp기준으로 짝/홀 인덱스에 대해 변경</li>\n<li>변경은 toupper(), tolower() STL 사용</li>\n</ol>\n<hr>\n<h2>문제 풀이</h2>\n<h3>ASCII 코드 사용(실패)</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> end <span class=\"token operator\">&lt;</span> LEN<span class=\"token punctuation\">;</span> end<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token comment\">//짝수 이면</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\ts<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tstart<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예제를 보니 입력값이 소문자로만 주어져, 홀수일때만 대문자로 변경하면 될 것같아 홀수 인덱스만 ASCII코드를 사용해서 풀이했다.</p>\n<p>돌려봣더니 전부 실패가 나와서 멘붕. 이게 뭔가 싶었다.</p>\n<p>아마 입력 예제가 대소문자 섞여서 나오는듯 싶다.</p>\n<hr>\n<h3>STL(tolower, touppwer) 사용(성공)</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">\ts <span class=\"token operator\">+=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 마지막 인덱스까지 스캔하기 위해 ' '추가</span>\n\tstring answer <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\tstring tmp <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> LEN <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 입력 스트링 길이</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> LEN<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token comment\">//공백이 보이기 전까지 tmp에 입력값 저장</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n\t\t\ttmp <span class=\"token operator\">+=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//공백이 보이면 tmp를 처리</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> tmpSize <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tmp 길이</span>\n\n\t\t\t<span class=\"token comment\">// 다시 tmp에 대한 반복문</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> tmpSize<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">//짝수</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\ttmp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">toupper</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 짝수면 무조건 대문자</span>\n\t\t\t\t<span class=\"token comment\">//홀수</span>\n\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t\ttmp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">tolower</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 홀수면 무조건 소문자</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// answer에 tmp와 띄어쓰기를 추가</span>\n\t\t\tanswer <span class=\"token operator\">+=</span> tmp<span class=\"token punctuation\">;</span>\n\t\t\tanswer <span class=\"token operator\">+=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span>\n\t\t\ttmp <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">//마지막 공백이 더해지므로 뒤에 인자는 제거</span>\n\tanswer<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>매개변수 ‘s’에 공백을 추가해주었다. for문을 멈추는 기준을 s인덱스가 ’ ‘(공백)일 때로 설정을 했기 때문이다.</p>\n<p>마지막에 다시 pop_back()을 해서 추가되는 공백을 제거했다.</p>\n<p>문자열 문제는 대부분 시간제약에서 자유로워 2중 for문을 사용했다. s[i]가 공백이 아니면 tmp라는 변수에 단어를 저장한다.</p>\n<p>tmp는 공백 기준으로 생성된 단어이고, 이 단어를 이제 for문을 다시 돌려 인덱스가 짝수이면 toupper(), 홀수이면 tolower()로 대소문자를 변경했다. 배열 인덱스가 0부터 시작이기 때문에 제시된 문제와는 반대로 동작한다.</p>\n<h1>Source</h1>\n<p><a href=\"https://github.com/MinByeongChan/myMBC/blob/master/Codetest/Programmers/LengthOfVisited.cpp\">Github 전체소스</a></p>","frontmatter":{"title":"[프로그래머스] 이상한 문자 만들기","date":"January 15, 2020","description":null}}},"pageContext":{"slug":"/algorithm-PRMS-12930-post/","previous":{"fields":{"slug":"/android-ch4-retrofit2-post/"},"frontmatter":{"title":"[Android] Retrofit2 GET 사용해서 데이터 조회"}},"next":{"fields":{"slug":"/android-ch5-sharedpreferences-post/"},"frontmatter":{"title":"[Android] SharedPreferences, 앱 내부 데이터 저장"}}}},"staticQueryHashes":["1246554614","2841359383"]}