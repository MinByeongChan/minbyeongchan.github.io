{"componentChunkName":"component---src-templates-blog-post-js","path":"/android-ch5-sharedpreferences-post/","result":{"data":{"site":{"siteMetadata":{"title":"ByeongChan"}},"markdownRemark":{"id":"048725c9-82e5-57a2-99d9-dcf458987195","excerpt":"SharedPreferences란? 앱 개발을 하다보면 token과 같이 데이터를 저장해야하는 상황이 닥칠 수 있다. 는 일련의 데이터를 앱 내부에 계속 저장시키는 기능을 한다. 앱이 삭제되지 않는 이상 SharedPreferences…","html":"<style>\n    .android {\n        color: green;\n    } \n</style>\n<h1>SharedPreferences란?</h1>\n<p>앱 개발을 하다보면 token과 같이 데이터를 저장해야하는 상황이 닥칠 수 있다. <code class=\"language-text\">SharedPredferences</code>는 <strong>일련의 데이터를 앱 내부에 계속 저장시키는 기능</strong>을 한다. 앱이 삭제되지 않는 이상 SharedPreferences로 저장된 데이터는 앱 내부에 남아있게 된다.</p>\n<p>처음에 SQLite를 사용해 DB를 구축해서 저장하면 되지 않을까 싶었는데, 작은 데이터 때문에 DB를 구축해야하는 것은 상당히 비효율 적일 수 있다 생각해서 찾게 되었다.</p>\n<hr>\n<h2>초기 설정</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> ShearedPreferencesActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppcompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>SharedPreferences는 <code class=\"language-text\">Activity</code>를 상속받는다. 또는 AppcompatActivty도 가능하다.</p>\n<p>Activity내부에 SharedPreference가 있기 때문에 상속을 안하면 사용이 불가능하니 반드시 하자.</p>\n<p>또한, SharedPreferences를 갖는 객체 또는 클래스는 앱이 시작 될 때, 처음 실행되어야한다. 앱이 처음 시작될 때 바로 실행시키기 위해 <code class=\"language-text\">manifest</code>를 설정해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token operator\">&lt;</span>application\n        android<span class=\"token operator\">:</span>name<span class=\"token operator\">=</span><span class=\"token string\">\".GlobalApplication\"</span>\n        <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n\n        <span class=\"token operator\">&lt;</span>activity android<span class=\"token operator\">:</span>name<span class=\"token operator\">=</span><span class=\"token string\">\".MainActivity\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>activity<span class=\"token operator\">></span>\n        <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>application<span class=\"token operator\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> GlobalApplication <span class=\"token operator\">:</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> prefs <span class=\"token operator\">:</span> SharedPreferencesActivity\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        prefs <span class=\"token operator\">=</span> <span class=\"token function\">SharedPreferencesActivity</span><span class=\"token punctuation\">(</span>applicationContext<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>GlobalApplication 클래스는 Preferences 객체가 담겨있는 클래스이다. 객체를 처음 생성될 때, 앱의 시작 위치가 되어야한다. 그러므로 GlobalApplication를 가장 위에 위치 시켰다.</p>\n<p>onCreate() 안에 prefs는 SharedPreferences의 객체를 의미한다. Context를 매개변수로 처음 시작될 때의 Activity를 넘겨준다.</p>\n<hr>\n<h2>데이터 가져오기</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">SharedPreferencesActivity</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">val</span> prefs <span class=\"token operator\">:</span> SharedPreferences <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getSharedPreferences</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"access_token\"</span><span class=\"token punctuation\">,</span>\n        MODE_PRIVATE\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">//값 불러오기</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">getPreferences</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> prefs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"access_token\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//값 저장하기</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">savePreferences</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> editor <span class=\"token operator\">:</span> SharedPreferences<span class=\"token punctuation\">.</span>Editor <span class=\"token operator\">=</span> prefs<span class=\"token punctuation\">.</span><span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        editor<span class=\"token punctuation\">.</span><span class=\"token function\">putString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"access_token\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n        editor<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>SharedPreference는 매개변수로 Context를 받는다. 그리고 GlobalApplication에서 전역으로 선언한 prefs변수를 정의한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getPreferences</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> pref <span class=\"token operator\">:</span> SharedPreferences <span class=\"token operator\">=</span> <span class=\"token function\">getSharedPreferences</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">,</span> MODE_PRIVATE<span class=\"token punctuation\">)</span>\n        pref<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>처음에 “token”이라는 key값을 생성한다. 가져올 때는 getString을 사용한다.</p>\n<p>getString은 인자가 두개 존재하는데 첫번째는 Key를 의미하고, 두번째는 value를 의미한다.</p>\n<p>key를 가져오려 하는데 key가 존재하지 않으면 \"\"를 불러오게된다.</p>\n<hr>\n<h2>데이터 저장하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">savePreferences</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> pref <span class=\"token operator\">:</span> SharedPreferences <span class=\"token operator\">=</span> <span class=\"token function\">getSharedPreferences</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">,</span> MODE_PRIVATE<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> editor <span class=\"token operator\">:</span> SharedPreferences<span class=\"token punctuation\">.</span>Editor <span class=\"token operator\">=</span> pref<span class=\"token punctuation\">.</span><span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        editor<span class=\"token punctuation\">.</span><span class=\"token function\">putString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"token message\"</span><span class=\"token punctuation\">)</span>\n        editor<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>불러오기와 다른점은 editor를 사용한다는 것이다.</p>\n<p>editor를 생성하고 editor에 putString을 하여 저장한다. getString과 마찬가지로 인자가 두개이고 의미하는 바는 위와 똑같다.</p>\n<p>“token”이라는 key, “token message”라는 value가 들어가게된다.</p>\n<p>마지막에는 commit을 반드시 해줘야 editor에 등록된 데이터가 저장된다.</p>\n<hr>\n<h2>Key 삭제하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">removePreferences</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> pref <span class=\"token operator\">:</span> SharedPreferences <span class=\"token operator\">=</span> <span class=\"token function\">getSharedPreferences</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">,</span> MODE_PRIVATE<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> editor <span class=\"token operator\">:</span> SharedPreferences<span class=\"token punctuation\">.</span>Editor <span class=\"token operator\">=</span> pref<span class=\"token punctuation\">.</span><span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        editor<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span>\n        editor<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>마찬가지로 editor를 사용하고 remove()에서 삭제하려는 key를 지정한다.</p>\n<hr>\n<h2>모든 데이터 삭제하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">removeAllPreferences</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> pref <span class=\"token operator\">:</span> SharedPreferences <span class=\"token operator\">=</span> <span class=\"token function\">getSharedPreferences</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">,</span> MODE_PRIVATE<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> editor <span class=\"token operator\">:</span> SharedPreferences<span class=\"token punctuation\">.</span>Editor <span class=\"token operator\">=</span> pref<span class=\"token punctuation\">.</span><span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        editor<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        editor<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>나머지는 다 동일하고 clear()를 사용한다.</p>\n<hr>\n<p>앱이 시작될 때 SharedPredferences를 등록해야하는 것을 너무 늦게 깨달았다. 이것땜에 몇번을 삽질했는지 …</p>\n<blockquote>\n<p>티스토리 아라비안왕자님 블로그 참고해서 공부</p>\n</blockquote>","frontmatter":{"title":"[Android] SharedPreferences, 앱 내부 데이터 저장","date":"January 16, 2020","description":null}}},"pageContext":{"slug":"/android-ch5-sharedpreferences-post/","previous":{"fields":{"slug":"/algorithm-PRMS-12930-post/"},"frontmatter":{"title":"[프로그래머스] 이상한 문자 만들기"}},"next":{"fields":{"slug":"/algorithm-PRMS-12899-post/"},"frontmatter":{"title":"[프로그래머스] 124 나라의 숫자"}}}},"staticQueryHashes":["1246554614","2841359383"]}