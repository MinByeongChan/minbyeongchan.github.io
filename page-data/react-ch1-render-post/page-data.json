{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-ch1-render-post/","result":{"data":{"site":{"siteMetadata":{"title":"ByeongChan"}},"markdownRemark":{"id":"b32c1070-212c-5df4-b26c-8842cc6d5d94","excerpt":"React 가이드 참조해서 공부 초기 설정  설치.  설치.  명령어로 설치 확인.  으로 create-react-app 설치 ; cd 프로젝트 명; ; JSX에 대한 간단한 개념 JSX는 ‘JavaScript XML’의 줄임말로 자바스크립트에 XML…","html":"<p><a href=\"https://ko.reactjs.org/docs/rendering-elements.html\">React 가이드 참조해서 공부</a></p>\n<h1>초기 설정</h1>\n<ol start=\"0\">\n<li><code class=\"language-text\">Visual Studio Code</code> 설치.</li>\n<li><code class=\"language-text\">node.js</code> 설치.</li>\n<li><code class=\"language-text\">npm -v</code> 명령어로 설치 확인.</li>\n<li><code class=\"language-text\">npm create-react-app</code> 으로 create-react-app 설치</li>\n<li><code class=\"language-text\">npm create-react-app [프로젝트 명]</code>;</li>\n<li>cd [프로젝트 명];</li>\n<li><code class=\"language-text\">npm start</code>;</li>\n</ol>\n<h1>JSX에 대한 간단한 개념</h1>\n<p>JSX는 ‘JavaScript XML’의 줄임말로 자바스크립트에 XML을 추가한 확장형 문법이라고 한다. 기존에 자바스크립트와 HTML파일 두개를 작성하는 번거로움이 있었지만, JSX를 사용하면 하나의 파일안에 XML 형식의 문법을 작성하여 컴포넌트를 불러오게 된다.</p>\n<p>컴포넌트별로 불러오기 때문에 코드를 표현하기 좀 더 수월하더라.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span>\n    const element = <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello, World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>표현식은 위와같이 나타내며 변수 안에 태그 식을 저장할 수도 있다. 물론 태그 안에 자식 태그, object 사용 등 <code class=\"language-text\">자바스크립트와 연동</code> 가능하게 만들 수 있다.</p>\n<h1>Render</h1>\n<h2>JSX파일 생성</h2>\n<p>RCC.JSX을 생성하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RCC</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello React!!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token constant\">RCC</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기에서 봐야할 것은 return 반환되는 값이다. class는 React.Component라는 컴포넌트 작성 클래스를 상속한다. Component를 상속하므로서 RCC 클래스는 리액트에서 컴포넌트로 동작하게 된다.</p>\n<p>컴포넌트는 html 코드를 반환하는데 <code class=\"language-text\">div</code>만 반환되는것으로 보인다. div안에 뭐 여러가지 태그를 넣으면 되니 크게 문제는 안될것같다.</p>\n<p>암튼 반환값이 html코드라는것이 핵심이다.</p>\n<h2>App.js</h2>\n<p>리액트에서 가장 먼저 실행되는(java에서 main())파일은 <code class=\"language-text\">App.js</code>이다. App.js에서 <code class=\"language-text\">import</code>를 하여 컴포넌트를 불러온다.</p>\n<p>처음에 App.js가 defalut 로 설정 되어있다. 이것들을 rcc컴포넌트를 불러오기 위해 수정을 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token constant\">RCC</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./03/rcc.jsx\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token constant\">RCC</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>위와 같이 설정하면 Hello world가 출력되는 것을 확인할 수 있다.</p>\n<p>그렇다면 어떠한 구조로 hello world가 출력될까.</p>\n<p>먼저 index.js를 보자.</p>\n<h2>index.js</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./index.css\"</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> serviceWorker <span class=\"token keyword\">from</span> <span class=\"token string\">\"./serviceWorker\"</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nserviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 import부터 보면, react를 사용하기 위해 가장 기본적으로 <code class=\"language-text\">react</code>를 가져온다. 또 <code class=\"language-text\">react-dom</code>이라는 것을 가져오는데 이것은 <code class=\"language-text\">ReactDOM.render()</code>을 사용하기 위해 필요하다.</p>\n<p>index.js에서는 render를 시켜서 처음 시작되는 js파일을 불러온다. 앞서 언급한 App.js가 먼저 실행된다고 했는데, index.js에서 App을 root로 불러오기 때문에 먼저 실행되는 구조로 동작하는 것이다.</p>\n<h2>리액트와 첫 대면. (정확히는 두번째)</h2>\n<p>컴포넌트는 리액트에서 어떤 역할을 할까.</p>\n<p>JS, Jquery를 쓰다가 리액트를 써보니 확실히 유지보수성에서 편리하다는 느낌을 받았다.</p>\n<p>JS에서 컴포넌트를 작성할 수 있지만, 날코딩 느낌이 강하다. 물론 내가 코딩을 잘 못해서 그런걸수도…</p>\n<p>하지만 리액트에선 구조 자체가 컴포넌트별로 동작이 이뤄지게끔 구성되어있다. 이것은 오류를 발견할 때에도 비교적 빠르게 찾을 수 있고 무엇보다 코드의 재사용이 매우 간편하게 가능할 것 같다. 재사용하기에 너무 좋게 구성되어 있기 때문에 여기에 좀 반했다.</p>\n<p>앞으로 리액트에 대해 공부하고, 숙지했던 내용들을 간단히 정리하려고 한다. 최근 일하기 시작하면서 일에 치여살고, 정신없이 살다보니 벌써 4개월이 지났다. 다시 시작해야지. 오늘은 여기까지…</p>","frontmatter":{"title":"[React] 초기설정, JSX, 렌더링 및 기본 개념","date":"July 05, 2020","description":null}}},"pageContext":{"slug":"/react-ch1-render-post/","previous":{"fields":{"slug":"/android-ch8-webview-post/"},"frontmatter":{"title":"[Android] Webview와 Javascript 연동(Eclipse, Tomcat, Jquery)"}},"next":{"fields":{"slug":"/react-ch2-props-post/"},"frontmatter":{"title":"[React] 컴포넌트 개념, props 데이터 전달방법"}}}},"staticQueryHashes":["1246554614","2841359383"]}